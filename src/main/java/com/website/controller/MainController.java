package com.website.controller;

import com.website.services.CompanyService;
import com.website.services.JobService;
import com.website.services.PersonService;
import com.website.services.SkillService;
import com.website.entities.*;
import com.website.entities.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Controller    // This means that this class is a Controller
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PersonService personService;

    @Autowired
    private SkillService skillService;

    @Autowired
    private CompanyService companyService;

    @Autowired
    private JobService jobService;

    @GetMapping("/home")
    public String getHome()
    {
        return "/home";
    }

    @GetMapping("/profilePage")
    public String getProfilePage()
    {
        return "/profilePage";
    }

    @GetMapping("/browseJobs")
    public String getBrowseJobsPage()
    {
        return "/browseJobs";
    }

    @GetMapping("/postjob")
    public String getAddJob()
    {
        return "/postJob";
    }

    @PostMapping(path="/addj")
    public String addNewJob (Job j, BindingResult bindingResult) {
        if(bindingResult.hasErrors())
        {
            return "/postJob";
        }
        String deleteCompany = "Google";
        j.setDatePosted(new Date());
        Company c = companyService.findByName(deleteCompany);
        j.setEmployer(c);
        jobService.save(j);
        return "redirect:/addJobSkill?job="+j.getName().replace(" ", "%20");
    }

    @GetMapping(path="/addJobSkill")
    public String getAddSkillToJob(ModelMap map, String job)
    {
        List<String> allSkills = new ArrayList<String>();
        skillService.findAll().forEach(x -> allSkills.add(x.getName()));
        map.addAttribute("allSkills",allSkills);
        map.addAttribute("job",job);
        return "/addJobSkill";
    }

    @PostMapping(path = "/skillsToJob")
    public String addSkillToJob(String name, String job)
    {
        String deleteCompany = "Google";
        Skill s = skillService.findByName(name);
        jobService.addSkill(job, s);
        return "redirect:/addJobSkill?job="+job.replace(" ", "%20");
    }

    @GetMapping("/addPersonSkill")
    public String getAddPersonSkillPage(ModelMap map)//, Principal principal)
    {
        //ASTA O SA FIE PRINCIPAL.getname
        String deleteMe = "beputa@yahoo.com";
        map.addAttribute("skills",personService.findByEmail(deleteMe).getSkills());
        List<String> allSkills = new ArrayList<String>();
        skillService.findAll().forEach(x -> allSkills.add(x.getName()));
        map.addAttribute("allSkills",allSkills);
        return "/addPersonSkill";
    }

    @PostMapping("/skillAdded")
    public String addSkill(Skill s)
    {
        String deleteMe = "beputa@yahoo.com";
        personService.addSkill(deleteMe,s);
        return "redirect:/addPersonSkill";
    }

    @GetMapping("/addperson")
    public String getAddPerson()
    {
        return "/addPerson";
    }

    @PostMapping(path="/addp") // Map ONLY POST Requests
    public String addNewPerson (String birthdayy, Person p, BindingResult bindingResult1,
                                String genderr, BindingResult bindingResult2) {
        if(bindingResult1.hasErrors()){
            return "/addPerson";
        }
        if(bindingResult2.hasErrors()){
            return "/addPerson";
        }
        p.setGender(Gender.valueOf(genderr));
        try {
            p.setBirthday(new SimpleDateFormat("MM/dd/yyyy").parse(birthdayy));
        } catch (ParseException e) {
            e.printStackTrace();
        }
        personService.save(p);
        return "Saved";
    }

    @GetMapping(path="/allpersons")
    public @ResponseBody Iterable<Person> getAllPersons() {
        // This returns a JSON or XML with the users
        return personService.findAll();
    }

    @GetMapping("/addskill")
    public String getAddSkill() {return "/addSkill";}

    @PostMapping(path="/adds")
    public @ResponseBody String addNewSkill (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Skill s = new Skill();
        s.setName(name);
        skillService.save(s);
        return "Saved";
    }

    @GetMapping(path="/allskills")
    public @ResponseBody Iterable<Skill> getAllSkills() {
        // This returns a JSON or XML with the users
        return skillService.findAll();
    }

    @GetMapping("/addcompany")
    public String getAddCompany() {return "/addCompany";};

    @PostMapping(path="/addc")
    public String addNewCompany (Company c, BindingResult bindingResult) {
        if(bindingResult.hasErrors())
        {
            return "/addCompany";
        }
        companyService.save(c);
        return "Saved";
    }

    @GetMapping(path="/allcompanies")
    public @ResponseBody Iterable<Company> getAllCompanies() {
        // This returns a JSON or XML with the users
        return companyService.findAll();
    }

    @GetMapping(path="/alljobs")
    public @ResponseBody Iterable<Job> getAllJobs() {
        // This returns a JSON or XML with the users
        return jobService.findAll();
    }
}
