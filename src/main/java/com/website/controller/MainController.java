package com.website.controller;

import com.website.dataAccess.CompanyDao;
import com.website.dataAccess.JobDao;
import com.website.dataAccess.PersonDao;
import com.website.dataAccess.SkillDao;
import com.website.entities.Company;
import com.website.entities.Job;
import com.website.entities.Person;
import com.website.entities.Skill;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PersonDao personDao;

    @Autowired
    private SkillDao skillDao;

    @Autowired
    private CompanyDao companyDao;

    @Autowired
    private JobDao jobDao;

    @GetMapping("/addperson")
    public String getAddPerson()
    {
        return "/addPerson";
    }

    @PostMapping(path="/addp") // Map ONLY POST Requests
    public @ResponseBody String addNewPerson (@RequestParam String name, @RequestParam String email,
                                              @RequestParam String description, @RequestParam String phone) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Person p = new Person();
        p.setName(name);
        p.setEmail(email);
        p.setDescription(description);
        p.setPhone(phone);
        personDao.save(p);
        return "Saved";
    }

    @GetMapping(path="/allpersons")
    public @ResponseBody Iterable<Person> getAllPersons() {
        // This returns a JSON or XML with the users
        return personDao.findAll();
    }

    @GetMapping("/addskill")
    public String getAddSkill() {return "/addSkill";};

    @PostMapping(path="/adds")
    public @ResponseBody String addNewSkill (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Skill s = new Skill();
        s.setName(name);
        skillDao.save(s);
        return "Saved";
    }

    @GetMapping(path="/allskills")
    public @ResponseBody Iterable<Skill> getAllSkills() {
        // This returns a JSON or XML with the users
        return skillDao.findAll();
    }

    @GetMapping("/addcompany")
    public String getAddCompany() {return "/addCompany";};

    @PostMapping(path="/addc")
    public @ResponseBody String addNewCompany (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Company c = new Company();
        c.setName(name);
        companyDao.save(c);
        return "Saved";
    }

    @GetMapping(path="/allcompanies")
    public @ResponseBody Iterable<Company> getAllCompanies() {
        // This returns a JSON or XML with the users
        return companyDao.findAll();
    }

    @GetMapping("/addjob")
    public String getAddJob() {return "/addJob";};

    @PostMapping(path="/addj")
    public @ResponseBody String addNewJob (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Job j = new Job();
        j.setName(name);
        jobDao.save(j);
        return "Saved";
    }

    @GetMapping(path="/alljobs")
    public @ResponseBody Iterable<Job> getAllJobs() {
        // This returns a JSON or XML with the users
        return jobDao.findAll();
    }
}
